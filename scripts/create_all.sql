-- Script completo para recriar todo o banco de dados
-- Execute após o drop_all.sql

-- ====== CRIAÇÃO DE SEQUÊNCIAS ======
CREATE SEQUENCE USUARIOS_SEQ START WITH 1 INCREMENT BY 1 NOCACHE NOCYCLE;
CREATE SEQUENCE INVESTIMENTO_SEQ START WITH 1 INCREMENT BY 1 NOCACHE NOCYCLE;
CREATE SEQUENCE RENTABILIDADE_DIARIA_SEQ START WITH 1 INCREMENT BY 1 NOCACHE NOCYCLE;

-- ====== CRIAÇÃO DE TABELAS ======

-- Tabela de Usuários (para autenticação)
CREATE TABLE USUARIOS (
    ID NUMBER(19) PRIMARY KEY,
    USERNAME VARCHAR2(255) NOT NULL UNIQUE,
    PASSWORD VARCHAR2(255) NOT NULL,
    NOME VARCHAR2(255) NOT NULL,
    EMAIL VARCHAR2(255),
    ROLE VARCHAR2(50) NOT NULL CHECK (ROLE IN ('USER', 'ADMIN'))
);

-- Tabela de Usuário Investimento (para CPF)
CREATE TABLE USUARIO_INVESTIMENTO (
    ID NUMBER(19) GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    CPF_IDENTIFICACAO VARCHAR2(11) NOT NULL UNIQUE
);

-- Tabela de Investimentos
CREATE TABLE INVESTIMENTO (
    ID NUMBER(19) PRIMARY KEY,
    PRODUTO VARCHAR2(255) NOT NULL,
    CATEGORIA VARCHAR2(50) NOT NULL CHECK (CATEGORIA IN ('RENDA_FIXA', 'RENDA_VARIAVEL', 'FUNDO_INVESTIMENTO', 'FUNDO_IMOBILIARIO', 'TESOURO_DIRETO', 'CDB', 'LCI', 'LCA')),
    VALOR NUMBER(15,2) NOT NULL,
    DATA_INVESTIMENTO DATE NOT NULL,
    USUARIO_ID NUMBER(19) NOT NULL,
    CONSTRAINT FK_INV_USUARIO FOREIGN KEY (USUARIO_ID) REFERENCES USUARIOS(ID) ON DELETE CASCADE
);

-- Tabela de Rentabilidade Diária
CREATE TABLE RENTABILIDADE_DIARIA_TABLE (
    ID NUMBER(19) PRIMARY KEY,
    DATA_RENTABILIDADE_DIARIA DATE,
    VALOR_DIARIO_ACAO NUMBER(15,2),
    TAXA_DIARIO_RENTABILIDADE NUMBER(10,4),
    MONTANTE_ACUMULADO_DIARIO NUMBER(15,2),
    INVESTIMENTO_ID NUMBER(19),
    CONSTRAINT FK_RENT_INV FOREIGN KEY (INVESTIMENTO_ID) REFERENCES INVESTIMENTO(ID) ON DELETE CASCADE
);

-- ====== CRIAÇÃO DE TRIGGERS ======

-- Trigger para auto-incremento da tabela USUARIOS
CREATE OR REPLACE TRIGGER BI_USUARIOS
BEFORE INSERT ON USUARIOS
FOR EACH ROW
WHEN (NEW.ID IS NULL)
BEGIN
  SELECT USUARIOS_SEQ.NEXTVAL INTO :NEW.ID FROM DUAL;
END;
/

-- Trigger para auto-incremento da tabela INVESTIMENTO
CREATE OR REPLACE TRIGGER BI_INVESTIMENTO
BEFORE INSERT ON INVESTIMENTO
FOR EACH ROW
WHEN (NEW.ID IS NULL)
BEGIN
  SELECT INVESTIMENTO_SEQ.NEXTVAL INTO :NEW.ID FROM DUAL;
END;
/

-- Trigger para auto-incremento da tabela RENTABILIDADE_DIARIA
CREATE OR REPLACE TRIGGER BI_RENTABILIDADE_DIARIA
BEFORE INSERT ON RENTABILIDADE_DIARIA_TABLE
FOR EACH ROW
WHEN (NEW.ID IS NULL)
BEGIN
  SELECT RENTABILIDADE_DIARIA_SEQ.NEXTVAL INTO :NEW.ID FROM DUAL;
END;
/

-- ====== INSERÇÃO DE DADOS INICIAIS ======

-- Usuário Administrador (senha: admin123)
INSERT INTO USUARIOS (USERNAME, PASSWORD, NOME, EMAIL, ROLE) 
VALUES ('admin', '$2a$10$92IXUNpkjO0rOQ5byMi.Ye4oKoEa3Ro9llC/.og/at2uheWG/igi.', 'Administrador', 'admin@investimentos.com', 'ADMIN');

-- Usuário comum de teste (senha: user123)
INSERT INTO USUARIOS (USERNAME, PASSWORD, NOME, EMAIL, ROLE) 
VALUES ('user', '$2a$10$ezTqmzODLNaNpuwZPsHNmODvCPJkZGKHKYdPF1FWOVxJN5HxYOZyW', 'Usuário Teste', 'user@test.com', 'USER');

-- Usuário investimento padrão
INSERT INTO USUARIO_INVESTIMENTO (CPF_IDENTIFICACAO) 
VALUES ('12345678909');

-- Investimentos de exemplo para o usuário admin (ID=1)
INSERT INTO INVESTIMENTO (PRODUTO, CATEGORIA, VALOR, DATA_INVESTIMENTO, USUARIO_ID) 
VALUES ('Tesouro Selic 2029', 'TESOURO_DIRETO', 5000.00, DATE '2024-01-15', 1);

INSERT INTO INVESTIMENTO (PRODUTO, CATEGORIA, VALOR, DATA_INVESTIMENTO, USUARIO_ID) 
VALUES ('CDB Banco XYZ', 'CDB', 10000.00, DATE '2024-02-20', 1);

INSERT INTO INVESTIMENTO (PRODUTO, CATEGORIA, VALOR, DATA_INVESTIMENTO, USUARIO_ID) 
VALUES ('Ações Itaú', 'RENDA_VARIAVEL', 7500.00, DATE '2024-03-10', 1);

-- Investimentos de exemplo para o usuário comum (ID=2)
INSERT INTO INVESTIMENTO (PRODUTO, CATEGORIA, VALOR, DATA_INVESTIMENTO, USUARIO_ID) 
VALUES ('LCI Caixa', 'LCI', 3000.00, DATE '2024-04-05', 2);

INSERT INTO INVESTIMENTO (PRODUTO, CATEGORIA, VALOR, DATA_INVESTIMENTO, USUARIO_ID) 
VALUES ('Fundo Multimercado ABC', 'FUNDO_INVESTIMENTO', 2500.00, DATE '2024-05-12', 2);

COMMIT;

-- Verificação dos dados inseridos
SELECT COUNT(*) AS TOTAL_USUARIOS FROM USUARIOS;
SELECT COUNT(*) AS TOTAL_INVESTIMENTOS FROM INVESTIMENTO;
SELECT COUNT(*) AS TOTAL_USUARIOS_INV FROM USUARIO_INVESTIMENTO;

-- Listagem dos usuários criados
SELECT ID, USERNAME, NOME, EMAIL, ROLE FROM USUARIOS ORDER BY ID;

-- Listagem dos investimentos por usuário
SELECT 
    u.USERNAME,
    i.PRODUTO,
    i.CATEGORIA,
    i.VALOR,
    i.DATA_INVESTIMENTO
FROM INVESTIMENTO i
JOIN USUARIOS u ON i.USUARIO_ID = u.ID
ORDER BY u.USERNAME, i.DATA_INVESTIMENTO;